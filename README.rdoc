= theman

The man getting you down?

Theman lets you import lots of data into PostgreSQL very fast.

== Installation

  gem install 'theman'

== Basic usage

Say we have a csv file called <tt>sample.csv</tt> with 220 rows:

  conn  = PGconn.open(:dbname => 'test')
  
  agent = Theman::Agency.new(conn, 'sample.csv')
  agent.create!

  res = conn.exec("SELECT count(*) FROM #{agent.table_name}")
  res.getvalue(0,0)

  => 220

== Basic usage with Active Record and a simple object
  
  conn  = ActiveRecord::Base.connection.raw_connection
  
  agent = Theman::Agency.new(conn, 'sample.csv')
  agent.create!

  model = Theman::Object(agent.table_name, ActiveRecord::Base)
  model.count

  => 220

== Advanced usage with Active Record and an existing model

Theman will call the <tt>create!</tt> method if you pass in a block.

  conn  = ActiveRecord::Base.connection.raw_connection

  agent = Theman::Agency.new conn, 'ugly.csv' |ag|
    ag.nulls /"N"/, /"UNKNOWN"/, /""/
    ag.seds "-n -e :a -e '1,15!{P;N;D;};N;ba'"
    ag.delimiter "|"
    ag.table do |t|
      t.string :name, :limit => 50
      t.date :date
      t.integer :ext_id
      t.float :amount
      t.boolean :exited
    end
  end
  
  MyModel.table_name = agent.table_name
  MyModel.where(:exited => true).count
  
  => 220

In the above example we omitted the last 15 rows, made some things null and 
specified some column data types.

If you do not provide a table block your columns will be VARCHAR(255); you 
can cherry pick the columns that you want to change the data types for.

The temp table has no id column by default, but you can add one by calling 
+add_primary_key!+, this will add the +agents_pkey+ column.

== Drop on commit

If you want to use <tt>ON COMMIT DROP</tt> you will need to pass in 
<tt>:on_commit => :drop</tt> into options and do everthing inside a transacton.

  agent = Theman::Agency.new conn, 'sample.csv', :on_commit => :drop

  agent.transaction do
    agent.create!
    # do stuff
  end

== No headers

If you data does not have headers pass into options <tt>:headers => false</tt>, but 
each column must be specified or the import will fail.

== Dates

Ah dates, the joy! Use datestyle to tell Theman to then tell PostgreSQL:

  agent = Theman::Agency.new conn, 'uber_foie_gras.csv' do |schmit|
    schmit.datestyle 'European'
    schmit.table do |t|
      t.date :start_date
      t.date :end_date
    end
  end

Refer to PostgreSQL docs for more info in the mean time here is some 
copy and paste action:

<b>ISO</b>

Use ISO 8601-style dates and times (YYYY-MM-DD HH:MM:SS). This is the default. 

<b>SQL</b>

Use Oracle/Ingres-style dates and times. 

<b>PostgreSQL</b>

Use traditional PostgreSQL format. 

<b>German</b>

dd.mm.yyyy

<b>European</b>

dd/mm/yyyy

<b>US</b>

mm/dd/yyyy

== My table is empty?

PostgreSQL <tt>COPY</tt> requires that the data be well formed, any rows that 
are different to what is expected by the table and the whole import will fail. 
If you are importing very large files and the import fails space on disc will still
be used untill <tt>VACUUM</tt>.

== Copyright

(The MIT License)

Copyright (c) 2010 {mynameisrufus (Rufus Post)}[http://github.com/mynameisrufus]

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
