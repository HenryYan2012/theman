= theman

The man getting you down?

FasterCSV is great but when you get to 100MB files it takes too long and 
you may only be looking for certain records that match some criteria, 
enter Theman.

== Installation

  gem install 'theman'

== Basic usage

Say we have a csv file calles +sample.csv+ with 220 rows:

  conn  = PGconn.open(:dbname => 'test')
  
  agent = Theman::Agency.new(conn, 'sample.csv')
  agent.create!

  res   = conn.exec("SELECT count(*) FROM #{agent.table_name}")
  res.getvalue(0,0)

  => 220

== Basic usage with Active Record and a simple object
  
  conn  = ActiveRecord::Base.connection.raw_connection
  
  agent = Theman::Agency.new(conn, 'sample.csv')
  agent.create!

  model Theman::Object(agent.table_name, ActiveRecord::Base)
  model.count

  => 220

== Advanced usage with Active Record and an existing model
    
  conn  = ActiveRecord::Base.connection.raw_connection

  agent = Theman::Agency.new conn, 'ugly.csv' |s|
    s.nulls /"N"/, /"UNKNOWN"/, /""/
    s.seds "-n -e :a -e '1,15!{P;N;D;};N;ba'"
    s.delimiter "|"
    s.table do |t|
      t.string :name, :limit => 50
      t.date :date
      t.integer :ext_id
      t.float :amount
      t.boolean :exited
    end
  end
  
  MyModel.table_name = agent.table_name
  MyModel.where(:exited => true).count
  
  => 220

In the above example we omitted the last 15 rows, made some things null, 
added a primary key and changed some column data types to something else.

If you do not provide a table block your columns will be VARCHAR(255); you 
can cherry pick the columns that you want to change the data types for.

The temp table has no id column by default, but you can add one using the options 
hash or calling +add_primary_key+, this will add the agents_pkey column.

WARNING: if you have user input in your sed commands, don't.

== Dates

Ah dates, the joy! Use datestyle to tell Theman to then tell PostgreSQL:

  agent = Theman::Agency.new conn, 'uber_foie_gras.csv' do |schmit|
    schmit.datestyle 'European'
    schmit.table do |t|
      t.date :start_date
      t.date :end_date
    end
  end

Refer to PostgreSQL docs for more info in the mean time here is some 
copy and paste action:

=== ISO

Use ISO 8601-style dates and times (YYYY-MM-DD HH:MM:SS). This is the default. 

=== SQL

Use Oracle/Ingres-style dates and times. 

=== PostgreSQL

Use traditional PostgreSQL format. 

=== German

dd.mm.yyyy

=== European

dd/mm/yyyy

=== US

mm/dd/yyyy

== Troubles

Table empty? the man (the real life one) has given you crappy data and 
PostgresSQL has silently dissed it.

== Copyright

(The MIT License)

Copyright (c) 2010 {mynameisrufus (Rufus Post)}[http://github.com/mynameisrufus]

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
